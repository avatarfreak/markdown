{"version":3,"sources":["logo.svg","components/Editor.jsx","components/Preview.jsx","components/MarkDown.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Editor","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","style","padding","color","backgroundColor","border","borderRadius","height","width","resize","outline","overflowX","overflowY","boxShadow","id","placeholder","value","markdown","onChange","handleChange","Component","renderer","marked","Renderer","link","url","text","concat","Preview","str","__html","breaks","class","dangerouslySetInnerHTML","markDownHTML","intialMarkdown","MarkDown","_Component","_this","state","bind","assertThisInitialized","inherits","createClass","key","event","setState","target","components_Editor","components_Preview","App","src","logo","alt","MarkDown_MarkDown","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e0922a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\n class Editor extends Component {\n    constructor(props) {\n        super(props);  \n    }\n    render() {\n        const shadowTextarea = {\n            padding: '10px',\n            color: '#bdb5b5',\n            backgroundColor: '#092b25ed',\n            border: '3px solid transparent',\n            borderRadius: '10px',\n            height: '400px',\n            width: '100%',\n            resize: 'none',\n            outline: 'none',\n            overflowX: 'hidden',\n            overflowY: 'scroll',\n            boxShadow: '1px 6px 6px #333'\n\n        }\n        return (\n            <div>\n                <h2 className=\"text-white-50\">Markdown</h2>\n                <textarea style={shadowTextarea} id=\"editor\"\n                    placeholder=\"Write something here...\"\n                    value={this.props.markdown}\n                    onChange={this.props.handleChange} />\n            </div>\n\n        )\n    }\n}\n\nexport default Editor\n","import React, { Component } from 'react'\nimport marked from 'marked';\n\nconst renderer = new marked.Renderer();\nrenderer.link = function (url, text) {\n    return `<a target=\"_blank\" href=\"${url}\">${text} </a>`;\n};\n\n class Preview extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    //please refer to Overriding default heading token by adding an embedded anchor tag like on GitHub\n    //https://marked.js.org/#/USING_PRO.md#renderer\n    markDownHTML(str) {\n        return {\n            __html: marked(str, { breaks: true, renderer: renderer }),\n        }\n    };\n\n    render() {\n        const shadowTextarea = {\n            padding: '10px',\n            color: '#5f5b5b',\n            backgroundColor: '#dde0e0',\n            border: '3px solid transparent',\n            borderRadius: '10px',\n            height: '400px',\n            width: '100%',\n            resize: 'none',\n            outline: 'none',\n            overflowX: 'hidden',\n            overflowY: 'scroll',\n            boxShadow: '1px 6px 6px #333'\n        }\n\n        return (\n            <div>\n                <h2 class=\"text-center text-white-50\">Preview</h2>\n                <div style={shadowTextarea}>\n                    <div id=\"preview\" dangerouslySetInnerHTML={this.markDownHTML(this.props.markdown)} />\n\n                </div>\n            </div>\n        )\n\n    }\n}\n\nexport default Preview\n","import React, { Component } from 'react';\nimport Editor from './Editor'\nimport Preview from './Preview'\n\nconst intialMarkdown = `\n================================ \n# Heading 1\n## Heading 2\n### Heading 3\n==================================  \nHere is Link:   \n[freeCodeCamp](https://www.freecodecamp.com)  \n==================================  \nInline \\`code\\` has \\`back-ticks around\\` it. \n==================================   \nBlock Code\n\\`\\`\\`javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s); \n\\`\\`\\`\n==================================  \nFruits list:\n  * apples\n  * grapes\n  * bananas\n  \nNumbered list:\n  1. apples\n  2. grapes\n  3. bananas  \n\n==================================  \nBlockQuote:  \n> Blockquotes are very handy in email to emulate reply text.   \n==================================  \nImage:  \n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")  \n==================================  \nBolded Text:  \nEmphasis, aka italics, with *asterisks* or _underscores_.\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\nCombined emphasis with **asterisks and _underscores_**.\nStrikethrough uses two tildes. ~~Scratch this.~~  \n==================================\n`\nexport class MarkDown extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // intialing the value \n            markdown: intialMarkdown\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n    //changing on fly\n    handleChange(event) {\n        this.setState({\n            markdown: event.target.value //getting value from textarea using event.target.value.(pub sub)\n        });\n    }\n\n    render() {\n       \n        return (\n            <div className=\"container jumbotron\" >\n                <div className=\"row\">\n                    <div className=\"col-md-6\" >\n                        <Editor markdown={this.state.markdown} handleChange={this.handleChange}/>\n                    </div>\n                    <div className=\"col-md-6 text-left\" >\n                        <Preview markdown={this.state.markdown}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default MarkDown\n","import React, { Component } from 'react';\nimport {MarkDown} from './components/MarkDown';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>React Markdown Previewer</h2>\n        </div>\n        <MarkDown /> \n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}